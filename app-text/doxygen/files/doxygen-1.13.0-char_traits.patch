libc++ changes deprecates the use of the 'unsigned char' type with the char_traits base template.
this causes issues compiling the latest versions

this patch is adaptation of the proposed patch from debohman, in this comment from the upstream issue thread:
https://github.com/doxygen/doxygen/issues/10928#issuecomment-2566016620

this is a temporary fix that recasts the JAVA_CC_EXTRA_FLAGS variable in CMakeLists.txt as a 'char' instead of 'unsigned char',
which is accepted by the char_traits template. the technically correct solution would be to use char8_t, however this type does not
exist in c++17 and would require changing to c++20.
the proposed patch includes this change, but due to the standards changes it causes unrelated issues with consteval functions in other files

for now this patch compiles and appears to work for doxygen-1.12.0
(the latter part is necessary as recasting to char causes overlapping function signatures in the QCString class)

index e8bea86bd..d2bb3d05b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -177,7 +177,7 @@ if (CMAKE_SYSTEM_NAME MATCHES "Windows")
 endif()
 
 # needed for JavaCC
-set(JAVA_CC_EXTRA_FLAGS "-DJAVACC_CHAR_TYPE=\"unsigned char\"")
+set(JAVA_CC_EXTRA_FLAGS "-DJAVACC_CHAR_TYPE=\"char\"")
 set(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS}       ${JAVA_CC_EXTRA_FLAGS}")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${JAVA_CC_EXTRA_FLAGS}")
 

index 20cda6166..0f20e121b 100644
--- a/src/qcstring.h
+++ b/src/qcstring.h
@@ -101,7 +101,7 @@ class QCString
 {
   public:
     QCString() = default;
-    explicit QCString( const std::string &s ) : m_rep(s) {}
+    //explicit QCString( const std::string &s ) : m_rep(s) {}
 
     QCString( std::string &&s) : m_rep(std::move(s)) {}
 
@@ -144,7 +144,7 @@ class QCString
     /** replaces the contents by that of C string \a str. */
     QCString &operator=( const char *str) { m_rep = str?str:""; return *this; }
 
-    QCString &operator=( const std::string &s) { m_rep = s; return *this; }
+    //QCString &operator=( const std::string &s) { m_rep = s; return *this; }
 
     /** Returns TRUE iff the string is empty */
     bool isEmpty() const { return m_rep.empty(); }
