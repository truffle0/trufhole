From 341f676066ab807d433f0f0b6c8356d2ad0e1cc9 Mon Sep 17 00:00:00 2001
From: David Holmes <dholmes@openjdk.org>
Date: Tue, 8 Jun 2021 04:53:02 +0000
Subject: [PATCH] 8267908: linux: thread_native_entry can scribble on stack
 frame

Reviewed-by: ysuenaga
---
 src/hotspot/os/linux/os_linux.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/hotspot/os/linux/os_linux.cpp b/src/hotspot/os/linux/os_linux.cpp
index d4b2ce02aeb0..a3424322be86 100644
--- a/src/hotspot/os/linux/os_linux.cpp
+++ b/src/hotspot/os/linux/os_linux.cpp
@@ -672,7 +672,8 @@ static void *thread_native_entry(Thread *thread) {
   // and we did not see any degradation in performance without `alloca()`.
   static int counter = 0;
   int pid = os::current_process_id();
-  void *stackmem = alloca(((pid ^ counter++) & 7) * 128);
+  int random = ((pid ^ counter++) & 7) * 128;
+  void *stackmem = alloca(random != 0 ? random : 1); // ensure we allocate > 0
   // Ensure the alloca result is used in a way that prevents the compiler from eliding it.
   *(char *)stackmem = 1;
 #endif
