while using USE="jbootstrap" (i.e. make bootcycle-images), the build will fail
on the second round with a "Connection refused error"

reported upstream on: https://bugs.openjdk.org/browse/JDK-8203164
however issue was not resolved until a patch *much* later in openjdk:23
relating to this issue: https://bugs.openjdk.org/browse/JDK-8201183

this patch is a backport of the changes in commit ecc603ca9b441cbb7ad27fbc2529fcb0b1da1992,
which fixes the above issues


diff --git a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/server/PortFile.java b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/server/PortFile.java
index 3bbdca22c4..d4a4294afc 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/server/PortFile.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/server/PortFile.java
@@ -59,11 +59,10 @@ public class PortFile {
     // Followed by a 4 byte int, with the port nr.
     // Followed by a 8 byte long, with cookie nr.

-    private String filename;
-    private File file;
-    private File stopFile;
+    private final String filename;
+    private final File file;
+    private final File stopFile;
     private RandomAccessFile rwfile;
-    private FileChannel channel;

     // FileLock used to solve inter JVM synchronization, lockSem used to avoid
     // JVM internal OverlappingFileLockExceptions.
@@ -98,17 +97,18 @@ public class PortFile {
         }
         // The rwfile should only be readable by the owner of the process
         // and no other! How do we do that on a RandomAccessFile?
-        channel = rwfile.getChannel();
     }

     /**
      * Lock the port file.
      */
     public void lock() throws IOException, InterruptedException {
-        if (channel == null) {
-            initializeChannel();
-        }
         lockSem.acquire();
+		if (rwfile != null) {
+			throw new IllegalStateException("rwfile not null");
+		}
+		initializeChannel();
+		FileChannel channel = rwfile.getChannel();
         lock = channel.lock();
     }

@@ -119,8 +119,7 @@ public class PortFile {
     public void getValues()  {
         containsPortInfo = false;
         if (lock == null) {
-            // Not locked, remain ignorant about port file contents.
-            return;
+			throw new IllegalStateException("Must lock before calling getValues");
         }
         try {
             if (rwfile.length()>0) {
@@ -167,7 +166,9 @@ public class PortFile {
      * Store the values into the locked port file.
      */
     public void setValues(int port, long cookie) throws IOException {
-        Assert.check(lock != null);
+		if (lock == null) {
+			throw new IllegalStateException("Must lock before calling setValues");
+		}
         rwfile.seek(0);
         // Write the magic nr that identifes a port file.
         rwfile.writeInt(magicNr);
@@ -181,19 +182,19 @@ public class PortFile {
      * Delete the port file.
      */
     public void delete() throws IOException, InterruptedException {
-        // Access to file must be closed before deleting.
-        rwfile.close();
-
-        file.delete();
-
-        // Wait until file has been deleted (deletes are asynchronous on Windows!) otherwise we
+		if (!file.exists()) { // file deleted already
+			return;
+		}
+		// Keep trying until file has been deleted, otherwise we
         // might shutdown the server and prevent another one from starting.
-        for (int i = 0; i < 10 && file.exists(); i++) {
+        for (int i = 0; i < 10 && file.exists() && !file.delete(); i++) {
             Thread.sleep(1000);
         }
         if (file.exists()) {
             throw new IOException("Failed to delete file.");
         }
+		// allow some time for late clients to connect
+		Thread.sleep(1000);
     }

     /**
@@ -222,10 +223,12 @@ public class PortFile {
      */
     public void unlock() throws IOException {
         if (lock == null) {
-            return;
+			throw new IllegalStateException("Not locked!");
         }
         lock.release();
         lock = null;
+		rwfile.close();
+		rwfile = null;
         lockSem.release();
     }

